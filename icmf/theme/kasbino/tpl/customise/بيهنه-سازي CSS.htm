<article class="whiteFrame paddy10 curvedFull">
	<h1>بیهنه سازی CSS</h1>
	<div class="center">
		<img src="theme/{$settings.theme}/img/Optimize CSS Delivery.jpg" alt="بیهنه سازی CSS" title="بیهنه سازی CSS" width="638" height="359">
	</div>
	<br>
	<p>
	این قانون زمانی فعال میشود كه PageSpeed Insights تشخیص دهد صفحه حاوی بازگردانی استایلشیتها1ی خارجی بلوك شده است كه میتواند زمان اولین بازگردانی را افزایش دهند. 
	</p>
	<p>
		بازنگری
	</p>
	<p>
	قبل از اینكه مرورگر بتواند محتوا را بازگردانی كند، باید تمامی اطلاعات استایل و لیاوت1 صفحه فعلی را پردازش كند. در نتیجه، مرورگر تا زمانی كه استایلشیتهای خارجی دانلود و پردازش نشده باشند، بازگردانی را بلوك خواهد كرد. این كار میتواند به چند مسیر تبادل اطلاعات نیاز داشته و در نتیجه زمان اولین بازگردانی افزایش پیدا كند. برای اطلاعات بیشتر در مورد مسیرهای حیاتی بازگردانی به render-tree construction, layout, and paint و برای اطلاعات بیشتر در مورد نكات مربوط به از بین بردن بلوك بازگردانی و بهبود ارائه CSS،‌ به Render Blocking CSS مراجعه كنید. 
	</p>
	<p>
	توصیه‌ها 
	</p>
	<p>
	اگر منابع خارجی CSS‌ كوچك هستند، شما میتوانید مستقیما آنها را در سند HTML تزریق كنید. این كار اینلاین1 نام دارد. استفاده از این روش به مرورگر اجازه میدهد تا بازگردانی صفحه را بدون اعمال چندین مسیر ادامه دهد. حواستان باشد اگر فایل CSS بزرگ باشد،‌ اینلاین كردن كامل باعث میشود PageSpeed Insights در مورد نسبت نیمه بالایی صفحه هشدار بدهد. این هشدار از طریق Priotrize Visible Content یا محتوای قابل مشاهده را اولویت بندی كنید،‌ هشدار داده خواهد شد. در صورتی كه فایل CSS‌ بزرگ باشد،‌ شما باید بخشی از CSS‌ كه اهمیت بیشتری از نظر بازگردانی در نیمه بالایی صفحه رادارد ، انتخاب و اینلاین كنید. سایر واحدهای استایل باید پس از بارگذاری محتوای نیمه بالای صفحه،‌ قرار داده شوند. 
	</p>
	<ul>
	<li>نمونه هایی از اینلاین كردن فایل CSS‌ كوچك</li>
	<li>داده URLهای بزرگ را اینلاین نكنید.</li>
	<li>خصوصیات CSS‌ را اینلاین نكنید.</li>
	</ul>
	<p>
		نمونه هایی از اینلاین كردن فایل CSS‌ كوچك
		اگر سند HTML چنین شكلی داشته باشد:
	</p>
	<pre>
	<html>
  <head>
    <link rel="stylesheet" href="small.css">
  </head>
  <body>
    <div class="blue">
      Hello, world!
    </div>
  </body>
</html>
	</pre>
	<p>
	و منبع Small.css چنین شكلی داشته باشد:
	</p>
	<pre>
		.yellow {background-color: yellow;}
  .blue {color: blue;}
  .big { font-size: 8em; }
  .bold { font-weight: bold; }
	</pre>
	<p>پس شما میتوانید CSS‌ حیاتی را به شكل زیر اینلاین كنید:</p>
	<pre>
		<html>
  <head>
    <style>
      .blue{color:blue;}
    </style>
    </head>
  <body>
    <div class="blue">
	      Hello, world!
    </div>
    <script>
      var cb = function() {
        var l = document.createElement('link'); l.rel = 'stylesheet';
        l.href = 'small.css';
        var h = document.getElementsByTagName('head')[0]; h.parentNode.insertBefore(l, h);
      };
      var raf = requestAnimationFrame || mozRequestAnimationFrame ||
          webkitRequestAnimationFrame || msRequestAnimationFrame;
      if (raf) raf(cb);
      else window.addEventListener('load', cb);
    </script>
  </body>
</html>
	</pre>
	<p>استایلهای حیاتی باید در محتوای نیمه بالای صفحه اینلاین و فورا در سند اعمال شوند. Small.css كامل پس از مشخص شدن شكل اولیه صفحه بارگذاری خواهد شد. استایلها پس از تكمیل بارگذاری و در صورت عدم بلوك شدن بازگردانی اولیه محتوای حیاتی اعمال خواهند شد. </p>
	<p>توجه داشته باشید كه پلتفورم وب به زودی توانایی بارگذاری استایلشیتها بدون بلوك كردن بازگردانی را پیدا خواهد كرد. در این صورت نیازی به استفاده از جاوا اسكریپت یا روش وارد كردن HTML‌ نخواهد بود. 
داده URLهای بزرگ را اینلاین نكنید.</p>
	<p>در زمان اینلاین كردن داده URL در فایل CSS دقت كنید. اگرچه انتخاب داده URLهای كوچك در CSS منطقی خواهد بود،‌ اما اینلاین كردن داده URLهای بزرگ میتواند باعث بزرگتر شدن اندازه CSS‌ نیمه بالای صفحه و در نتیجه به كاهش سرعت بازگردانی صفحه منجر شود.
خصوصیات CSS‌ را اینلاین نكنید</p>
	<p>در صورت امكان از اینلاین كردن خصوصیات CSS‌ در عناصر HTML (مانند <p style=...>) خودداری كنید زیرا باعث تكرار غیر ضروری كدها میشود. به علاوه،‌ اینلاین كردن CSS‌ در عناصر HTML‌ در تنظیمات پایه بر اساس سیاست امنیت محتوا (CSP1) منع شده است. </p>
	
	
</article>